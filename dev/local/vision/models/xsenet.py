#AUTOGENERATED! DO NOT EDIT! File to edit: dev/xse_resnext.ipynb (unless otherwise specified).

__all__ = ['ProdLayer', 'inplace_relu', 'SEModule', 'SEResNetBlock', 'SEBlock', 'SEResNeXtBlock', 'XSENet',
           'xse_resnet18', 'xse_resnext18_32x4d', 'xse_resnet34', 'xse_resnext34_32x4d', 'xse_resnet50',
           'xse_resnext50_32x4d', 'xse_resnet101', 'xse_resnext101_32x4d', 'xse_resnet152', 'xsenet154', 'se_kwargs1',
           'se_kwargs2', 'g0', 'g1', 'g2', 'g3']

#Cell
from ...torch_basics import *
from ...test import *

#Cell
class ProdLayer(Module):
    "Merge a shortcut with the result of the module by multiplying them."
    def forward(self, x): return x * x.orig

#Cell
inplace_relu = partial(nn.ReLU, inplace=True)

#Cell
def SEModule(ch, reduction):
    return SequentialEx(nn.AdaptiveAvgPool2d(1),
                        ConvLayer(ch, ch//reduction, ks=1, norm_type=None, act_cls=inplace_relu),
                        ConvLayer(ch//reduction, ch, ks=1, norm_type=None, act_cls=nn.Sigmoid),
                        ProdLayer())

#Cell
class SEResNetBlock(Module):
    "SE block from `ni` to `nh` with `stride`"
    def __init__(self, expansion, ni, nf, groups, reduction, nh1=None, nh2=None, stride=1, act_cls=inplace_relu):
        if nh2 is None: nh2 = nf
        if nh1 is None: nh1 = nh2
        nf,ni = nf*expansion,ni*expansion
        layers  = [ConvLayer(ni,  nh2, 3, act_cls=act_cls, stride=stride, groups=groups),
                   ConvLayer(nh2, nf,  3, act_cls=None, norm_type=NormType.BatchZero)
        ] if expansion == 1 else [
                   ConvLayer(ni,  nh1, 1, act_cls=act_cls),
                   ConvLayer(nh1, nh2, 3, act_cls=act_cls, stride=stride, groups=groups),
                   ConvLayer(nh2, nf,  1, act_cls=None, norm_type=NormType.BatchZero)
        ]
        self.convs = nn.Sequential(*layers)
        self.idconv = noop if ni==nf else ConvLayer(ni, nf, 1, act_cls=None)
        self.pool = noop if stride==1 else nn.AvgPool2d(2, ceil_mode=True)
        self.se = SEModule(nf, reduction=reduction)
        self.act = act_cls()

    def forward(self, x): return self.act(self.se(self.convs(x)) + self.idconv(self.pool(x)))

#Cell
def SEBlock(expansion, ni, nf, groups, reduction, stride=1, act_cls=inplace_relu):
    return SEResNetBlock(expansion, ni, nf, groups, reduction, nh1=nf*2, nh2=nf*expansion, stride=stride, act_cls=act_cls)

#Cell
def SEResNeXtBlock(expansion, ni, nf, groups, reduction, stride=1, act_cls=inplace_relu, base_width=4):
    w = math.floor(nf * (base_width / 64)) * groups
    return SEResNetBlock(expansion, ni, nf, groups, reduction, nh2=w, stride=stride, act_cls=act_cls)

#Cell
class XSENet(nn.Sequential):
    def __init__(self, block, expansion, layers, groups, reduction, p=0.2, c_in=3, c_out=1000):
        stem = []
        sizes = [c_in,16,32,64] if c_in<3 else [c_in,32,32,64]
        for i in range(3):
            stem.append(ConvLayer(sizes[i], sizes[i+1], stride=2 if i==0 else 1))

        block_szs = [64//expansion,64,128,256,512] +[256]*(len(layers)-4)
        blocks = [self._make_layer(block, expansion, block_szs[i], block_szs[i+1], l, groups, reduction, 1 if i==0 else 2)
                  for i,l in enumerate(layers)]
        drop = [] if p is None else [nn.Dropout(p)]
        super().__init__(
            *stem,
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            *blocks,
            nn.AdaptiveAvgPool2d(1), Flatten(), *drop,
            init_default(nn.Linear(block_szs[-1]*expansion, c_out)),
        )

    def _make_layer(self, block, expansion, ni, nf, blocks, groups, reduction, stride):
        return nn.Sequential(
            *[block(expansion, ni if i==0 else nf, nf, groups, reduction, stride=stride if i==0 else 1)
              for i in range(blocks)])

#Cell
se_kwargs1 = dict(groups=1 , reduction=16, p=None)
se_kwargs2 = dict(groups=32, reduction=16, p=None)
g0 = [2,2,2,2]
g1 = [3,4,6,3]
g2 = [3,4,23,3]
g3 = [3,8,36,3]

def xse_resnet18(c_out=1000, pretrained=False):         return XSENet(SEResNetBlock,  1, g0, c_out=c_out, **se_kwargs1)
def xse_resnext18_32x4d(c_out=1000, pretrained=False):  return XSENet(SEResNeXtBlock, 1, g0, c_out=c_out, **se_kwargs2)
def xse_resnet34(c_out=1000, pretrained=False):         return XSENet(SEResNetBlock,  1, g1, c_out=c_out, **se_kwargs1)
def xse_resnext34_32x4d(c_out=1000, pretrained=False):  return XSENet(SEResNeXtBlock, 1, g1, c_out=c_out, **se_kwargs2)
def xse_resnet50(c_out=1000, pretrained=False):         return XSENet(SEResNetBlock,  4, g1, c_out=c_out, **se_kwargs1)
def xse_resnext50_32x4d(c_out=1000, pretrained=False):  return XSENet(SEResNeXtBlock, 4, g1, c_out=c_out, **se_kwargs2)
def xse_resnet101(c_out=1000, pretrained=False):        return XSENet(SEResNetBlock,  4, g2, c_out=c_out, **se_kwargs1)
def xse_resnext101_32x4d(c_out=1000, pretrained=False): return XSENet(SEResNeXtBlock, 4, g2, c_out=c_out, **se_kwargs2)
def xse_resnet152(c_out=1000, pretrained=False):        return XSENet(SEResNetBlock,  4, g3, c_out=c_out, **se_kwargs1)
def xsenet154(c_out=1000, pretrained=False):
    return SENet(SEBlock, g3, groups=64, reduction=16, p=0.2, c_out=c_out)